// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:kukelola_flutter/networking/model/workflow_grid.dart';
import 'package:kukelola_flutter/generated/json/workflow_grid_helper.dart';
import 'package:kukelola_flutter/networking/model/corporate_calendar.dart';
import 'package:kukelola_flutter/generated/json/corporate_calendar_helper.dart';
import 'package:kukelola_flutter/networking/model/standart.dart';
import 'package:kukelola_flutter/generated/json/standart_helper.dart';
import 'package:kukelola_flutter/networking/model/user.dart';
import 'package:kukelola_flutter/generated/json/user_helper.dart';
import 'package:kukelola_flutter/networking/model/overtime_request_post.dart';
import 'package:kukelola_flutter/generated/json/overtime_request_post_helper.dart';
import 'package:kukelola_flutter/networking/model/staff_family.dart';
import 'package:kukelola_flutter/generated/json/staff_family_helper.dart';
import 'package:kukelola_flutter/networking/model/staff_education.dart';
import 'package:kukelola_flutter/generated/json/staff_education_helper.dart';
import 'package:kukelola_flutter/networking/model/staff_family_insert.dart';
import 'package:kukelola_flutter/generated/json/staff_family_insert_helper.dart';
import 'package:kukelola_flutter/networking/model/staff_education_insert.dart';
import 'package:kukelola_flutter/generated/json/staff_education_insert_helper.dart';
import 'package:kukelola_flutter/networking/model/staff.dart';
import 'package:kukelola_flutter/generated/json/staff_helper.dart';
import 'package:kukelola_flutter/networking/model/staff_experience_insert.dart';
import 'package:kukelola_flutter/generated/json/staff_experience_insert_helper.dart';
import 'package:kukelola_flutter/networking/model/payslip.dart';
import 'package:kukelola_flutter/generated/json/payslip_helper.dart';
import 'package:kukelola_flutter/networking/model/special_leave_list.dart';
import 'package:kukelola_flutter/generated/json/special_leave_list_helper.dart';
import 'package:kukelola_flutter/networking/model/token.dart';
import 'package:kukelola_flutter/generated/json/token_helper.dart';
import 'package:kukelola_flutter/networking/model/staff_experience.dart';
import 'package:kukelola_flutter/generated/json/staff_experience_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case WorkflowGrid:
				return workflowGridFromJson(data as WorkflowGrid, json) as T;
			case WorkflowGridData:
				return workflowGridDataFromJson(data as WorkflowGridData, json) as T;
			case CorporateCalendar:
				return corporateCalendarFromJson(data as CorporateCalendar, json) as T;
			case CorporateCalendarData:
				return corporateCalendarDataFromJson(data as CorporateCalendarData, json) as T;
			case Standart:
				return standartFromJson(data as Standart, json) as T;
			case User:
				return userFromJson(data as User, json) as T;
			case UserData:
				return userDataFromJson(data as UserData, json) as T;
			case UserDataProfilePicture:
				return userDataProfilePictureFromJson(data as UserDataProfilePicture, json) as T;
			case OvertimeRequestPost:
				return overtimeRequestPostFromJson(data as OvertimeRequestPost, json) as T;
			case OvertimeRequestPostData:
				return overtimeRequestPostDataFromJson(data as OvertimeRequestPostData, json) as T;
			case OvertimeRequestPostDataRequest:
				return overtimeRequestPostDataRequestFromJson(data as OvertimeRequestPostDataRequest, json) as T;
			case OvertimeRequestPostDataRequestData:
				return overtimeRequestPostDataRequestDataFromJson(data as OvertimeRequestPostDataRequestData, json) as T;
			case OvertimeRequestPostDataWorkflow:
				return overtimeRequestPostDataWorkflowFromJson(data as OvertimeRequestPostDataWorkflow, json) as T;
			case OvertimeRequestPostDataWorkflowData:
				return overtimeRequestPostDataWorkflowDataFromJson(data as OvertimeRequestPostDataWorkflowData, json) as T;
			case StaffFamily:
				return staffFamilyFromJson(data as StaffFamily, json) as T;
			case StaffFamilyData:
				return staffFamilyDataFromJson(data as StaffFamilyData, json) as T;
			case StaffEducation:
				return staffEducationFromJson(data as StaffEducation, json) as T;
			case StaffEducationData:
				return staffEducationDataFromJson(data as StaffEducationData, json) as T;
			case StaffFamilyInsert:
				return staffFamilyInsertFromJson(data as StaffFamilyInsert, json) as T;
			case StaffEducationInsert:
				return staffEducationInsertFromJson(data as StaffEducationInsert, json) as T;
			case Staff:
				return staffFromJson(data as Staff, json) as T;
			case StaffData:
				return staffDataFromJson(data as StaffData, json) as T;
			case StaffExperienceInsert:
				return staffExperienceInsertFromJson(data as StaffExperienceInsert, json) as T;
			case Payslip:
				return payslipFromJson(data as Payslip, json) as T;
			case SpecialLeaveList:
				return specialLeaveListFromJson(data as SpecialLeaveList, json) as T;
			case SpecialLeaveListData:
				return specialLeaveListDataFromJson(data as SpecialLeaveListData, json) as T;
			case Token:
				return tokenFromJson(data as Token, json) as T;
			case StaffExperience:
				return staffExperienceFromJson(data as StaffExperience, json) as T;
			case StaffExperienceData:
				return staffExperienceDataFromJson(data as StaffExperienceData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case WorkflowGrid:
				return workflowGridToJson(data as WorkflowGrid);
			case WorkflowGridData:
				return workflowGridDataToJson(data as WorkflowGridData);
			case CorporateCalendar:
				return corporateCalendarToJson(data as CorporateCalendar);
			case CorporateCalendarData:
				return corporateCalendarDataToJson(data as CorporateCalendarData);
			case Standart:
				return standartToJson(data as Standart);
			case User:
				return userToJson(data as User);
			case UserData:
				return userDataToJson(data as UserData);
			case UserDataProfilePicture:
				return userDataProfilePictureToJson(data as UserDataProfilePicture);
			case OvertimeRequestPost:
				return overtimeRequestPostToJson(data as OvertimeRequestPost);
			case OvertimeRequestPostData:
				return overtimeRequestPostDataToJson(data as OvertimeRequestPostData);
			case OvertimeRequestPostDataRequest:
				return overtimeRequestPostDataRequestToJson(data as OvertimeRequestPostDataRequest);
			case OvertimeRequestPostDataRequestData:
				return overtimeRequestPostDataRequestDataToJson(data as OvertimeRequestPostDataRequestData);
			case OvertimeRequestPostDataWorkflow:
				return overtimeRequestPostDataWorkflowToJson(data as OvertimeRequestPostDataWorkflow);
			case OvertimeRequestPostDataWorkflowData:
				return overtimeRequestPostDataWorkflowDataToJson(data as OvertimeRequestPostDataWorkflowData);
			case StaffFamily:
				return staffFamilyToJson(data as StaffFamily);
			case StaffFamilyData:
				return staffFamilyDataToJson(data as StaffFamilyData);
			case StaffEducation:
				return staffEducationToJson(data as StaffEducation);
			case StaffEducationData:
				return staffEducationDataToJson(data as StaffEducationData);
			case StaffFamilyInsert:
				return staffFamilyInsertToJson(data as StaffFamilyInsert);
			case StaffEducationInsert:
				return staffEducationInsertToJson(data as StaffEducationInsert);
			case Staff:
				return staffToJson(data as Staff);
			case StaffData:
				return staffDataToJson(data as StaffData);
			case StaffExperienceInsert:
				return staffExperienceInsertToJson(data as StaffExperienceInsert);
			case Payslip:
				return payslipToJson(data as Payslip);
			case SpecialLeaveList:
				return specialLeaveListToJson(data as SpecialLeaveList);
			case SpecialLeaveListData:
				return specialLeaveListDataToJson(data as SpecialLeaveListData);
			case Token:
				return tokenToJson(data as Token);
			case StaffExperience:
				return staffExperienceToJson(data as StaffExperience);
			case StaffExperienceData:
				return staffExperienceDataToJson(data as StaffExperienceData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (WorkflowGrid).toString()){
			return WorkflowGrid().fromJson(json);
		}	else if(type == (WorkflowGridData).toString()){
			return WorkflowGridData().fromJson(json);
		}	else if(type == (CorporateCalendar).toString()){
			return CorporateCalendar().fromJson(json);
		}	else if(type == (CorporateCalendarData).toString()){
			return CorporateCalendarData().fromJson(json);
		}	else if(type == (Standart).toString()){
			return Standart().fromJson(json);
		}	else if(type == (User).toString()){
			return User().fromJson(json);
		}	else if(type == (UserData).toString()){
			return UserData().fromJson(json);
		}	else if(type == (UserDataProfilePicture).toString()){
			return UserDataProfilePicture().fromJson(json);
		}	else if(type == (OvertimeRequestPost).toString()){
			return OvertimeRequestPost().fromJson(json);
		}	else if(type == (OvertimeRequestPostData).toString()){
			return OvertimeRequestPostData().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataRequest).toString()){
			return OvertimeRequestPostDataRequest().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataRequestData).toString()){
			return OvertimeRequestPostDataRequestData().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataWorkflow).toString()){
			return OvertimeRequestPostDataWorkflow().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataWorkflowData).toString()){
			return OvertimeRequestPostDataWorkflowData().fromJson(json);
		}	else if(type == (StaffFamily).toString()){
			return StaffFamily().fromJson(json);
		}	else if(type == (StaffFamilyData).toString()){
			return StaffFamilyData().fromJson(json);
		}	else if(type == (StaffEducation).toString()){
			return StaffEducation().fromJson(json);
		}	else if(type == (StaffEducationData).toString()){
			return StaffEducationData().fromJson(json);
		}	else if(type == (StaffFamilyInsert).toString()){
			return StaffFamilyInsert().fromJson(json);
		}	else if(type == (StaffEducationInsert).toString()){
			return StaffEducationInsert().fromJson(json);
		}	else if(type == (Staff).toString()){
			return Staff().fromJson(json);
		}	else if(type == (StaffData).toString()){
			return StaffData().fromJson(json);
		}	else if(type == (StaffExperienceInsert).toString()){
			return StaffExperienceInsert().fromJson(json);
		}	else if(type == (Payslip).toString()){
			return Payslip().fromJson(json);
		}	else if(type == (SpecialLeaveList).toString()){
			return SpecialLeaveList().fromJson(json);
		}	else if(type == (SpecialLeaveListData).toString()){
			return SpecialLeaveListData().fromJson(json);
		}	else if(type == (Token).toString()){
			return Token().fromJson(json);
		}	else if(type == (StaffExperience).toString()){
			return StaffExperience().fromJson(json);
		}	else if(type == (StaffExperienceData).toString()){
			return StaffExperienceData().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<WorkflowGrid>() is M){
			return data.map<WorkflowGrid>((e) => WorkflowGrid().fromJson(e)).toList() as M;
		}	else if(List<WorkflowGridData>() is M){
			return data.map<WorkflowGridData>((e) => WorkflowGridData().fromJson(e)).toList() as M;
		}	else if(List<CorporateCalendar>() is M){
			return data.map<CorporateCalendar>((e) => CorporateCalendar().fromJson(e)).toList() as M;
		}	else if(List<CorporateCalendarData>() is M){
			return data.map<CorporateCalendarData>((e) => CorporateCalendarData().fromJson(e)).toList() as M;
		}	else if(List<Standart>() is M){
			return data.map<Standart>((e) => Standart().fromJson(e)).toList() as M;
		}	else if(List<User>() is M){
			return data.map<User>((e) => User().fromJson(e)).toList() as M;
		}	else if(List<UserData>() is M){
			return data.map<UserData>((e) => UserData().fromJson(e)).toList() as M;
		}	else if(List<UserDataProfilePicture>() is M){
			return data.map<UserDataProfilePicture>((e) => UserDataProfilePicture().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPost>() is M){
			return data.map<OvertimeRequestPost>((e) => OvertimeRequestPost().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostData>() is M){
			return data.map<OvertimeRequestPostData>((e) => OvertimeRequestPostData().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataRequest>() is M){
			return data.map<OvertimeRequestPostDataRequest>((e) => OvertimeRequestPostDataRequest().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataRequestData>() is M){
			return data.map<OvertimeRequestPostDataRequestData>((e) => OvertimeRequestPostDataRequestData().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataWorkflow>() is M){
			return data.map<OvertimeRequestPostDataWorkflow>((e) => OvertimeRequestPostDataWorkflow().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataWorkflowData>() is M){
			return data.map<OvertimeRequestPostDataWorkflowData>((e) => OvertimeRequestPostDataWorkflowData().fromJson(e)).toList() as M;
		}	else if(List<StaffFamily>() is M){
			return data.map<StaffFamily>((e) => StaffFamily().fromJson(e)).toList() as M;
		}	else if(List<StaffFamilyData>() is M){
			return data.map<StaffFamilyData>((e) => StaffFamilyData().fromJson(e)).toList() as M;
		}	else if(List<StaffEducation>() is M){
			return data.map<StaffEducation>((e) => StaffEducation().fromJson(e)).toList() as M;
		}	else if(List<StaffEducationData>() is M){
			return data.map<StaffEducationData>((e) => StaffEducationData().fromJson(e)).toList() as M;
		}	else if(List<StaffFamilyInsert>() is M){
			return data.map<StaffFamilyInsert>((e) => StaffFamilyInsert().fromJson(e)).toList() as M;
		}	else if(List<StaffEducationInsert>() is M){
			return data.map<StaffEducationInsert>((e) => StaffEducationInsert().fromJson(e)).toList() as M;
		}	else if(List<Staff>() is M){
			return data.map<Staff>((e) => Staff().fromJson(e)).toList() as M;
		}	else if(List<StaffData>() is M){
			return data.map<StaffData>((e) => StaffData().fromJson(e)).toList() as M;
		}	else if(List<StaffExperienceInsert>() is M){
			return data.map<StaffExperienceInsert>((e) => StaffExperienceInsert().fromJson(e)).toList() as M;
		}	else if(List<Payslip>() is M){
			return data.map<Payslip>((e) => Payslip().fromJson(e)).toList() as M;
		}	else if(List<SpecialLeaveList>() is M){
			return data.map<SpecialLeaveList>((e) => SpecialLeaveList().fromJson(e)).toList() as M;
		}	else if(List<SpecialLeaveListData>() is M){
			return data.map<SpecialLeaveListData>((e) => SpecialLeaveListData().fromJson(e)).toList() as M;
		}	else if(List<Token>() is M){
			return data.map<Token>((e) => Token().fromJson(e)).toList() as M;
		}	else if(List<StaffExperience>() is M){
			return data.map<StaffExperience>((e) => StaffExperience().fromJson(e)).toList() as M;
		}	else if(List<StaffExperienceData>() is M){
			return data.map<StaffExperienceData>((e) => StaffExperienceData().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}