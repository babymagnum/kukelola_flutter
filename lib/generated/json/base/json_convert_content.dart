// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:kukelola_flutter/networking/model/user.dart';
import 'package:kukelola_flutter/generated/json/user_helper.dart';
import 'package:kukelola_flutter/networking/model/overtime_request_post.dart';
import 'package:kukelola_flutter/generated/json/overtime_request_post_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case User:
				return userFromJson(data as User, json) as T;
			case UserData:
				return userDataFromJson(data as UserData, json) as T;
			case UserDataProfilePicture:
				return userDataProfilePictureFromJson(data as UserDataProfilePicture, json) as T;
			case OvertimeRequestPost:
				return overtimeRequestPostFromJson(data as OvertimeRequestPost, json) as T;
			case OvertimeRequestPostData:
				return overtimeRequestPostDataFromJson(data as OvertimeRequestPostData, json) as T;
			case OvertimeRequestPostDataRequest:
				return overtimeRequestPostDataRequestFromJson(data as OvertimeRequestPostDataRequest, json) as T;
			case OvertimeRequestPostDataRequestData:
				return overtimeRequestPostDataRequestDataFromJson(data as OvertimeRequestPostDataRequestData, json) as T;
			case OvertimeRequestPostDataWorkflow:
				return overtimeRequestPostDataWorkflowFromJson(data as OvertimeRequestPostDataWorkflow, json) as T;
			case OvertimeRequestPostDataWorkflowData:
				return overtimeRequestPostDataWorkflowDataFromJson(data as OvertimeRequestPostDataWorkflowData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case User:
				return userToJson(data as User);
			case UserData:
				return userDataToJson(data as UserData);
			case UserDataProfilePicture:
				return userDataProfilePictureToJson(data as UserDataProfilePicture);
			case OvertimeRequestPost:
				return overtimeRequestPostToJson(data as OvertimeRequestPost);
			case OvertimeRequestPostData:
				return overtimeRequestPostDataToJson(data as OvertimeRequestPostData);
			case OvertimeRequestPostDataRequest:
				return overtimeRequestPostDataRequestToJson(data as OvertimeRequestPostDataRequest);
			case OvertimeRequestPostDataRequestData:
				return overtimeRequestPostDataRequestDataToJson(data as OvertimeRequestPostDataRequestData);
			case OvertimeRequestPostDataWorkflow:
				return overtimeRequestPostDataWorkflowToJson(data as OvertimeRequestPostDataWorkflow);
			case OvertimeRequestPostDataWorkflowData:
				return overtimeRequestPostDataWorkflowDataToJson(data as OvertimeRequestPostDataWorkflowData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (User).toString()){
			return User().fromJson(json);
		}	else if(type == (UserData).toString()){
			return UserData().fromJson(json);
		}	else if(type == (UserDataProfilePicture).toString()){
			return UserDataProfilePicture().fromJson(json);
		}	else if(type == (OvertimeRequestPost).toString()){
			return OvertimeRequestPost().fromJson(json);
		}	else if(type == (OvertimeRequestPostData).toString()){
			return OvertimeRequestPostData().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataRequest).toString()){
			return OvertimeRequestPostDataRequest().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataRequestData).toString()){
			return OvertimeRequestPostDataRequestData().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataWorkflow).toString()){
			return OvertimeRequestPostDataWorkflow().fromJson(json);
		}	else if(type == (OvertimeRequestPostDataWorkflowData).toString()){
			return OvertimeRequestPostDataWorkflowData().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<User>() is M){
			return data.map<User>((e) => User().fromJson(e)).toList() as M;
		}	else if(List<UserData>() is M){
			return data.map<UserData>((e) => UserData().fromJson(e)).toList() as M;
		}	else if(List<UserDataProfilePicture>() is M){
			return data.map<UserDataProfilePicture>((e) => UserDataProfilePicture().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPost>() is M){
			return data.map<OvertimeRequestPost>((e) => OvertimeRequestPost().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostData>() is M){
			return data.map<OvertimeRequestPostData>((e) => OvertimeRequestPostData().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataRequest>() is M){
			return data.map<OvertimeRequestPostDataRequest>((e) => OvertimeRequestPostDataRequest().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataRequestData>() is M){
			return data.map<OvertimeRequestPostDataRequestData>((e) => OvertimeRequestPostDataRequestData().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataWorkflow>() is M){
			return data.map<OvertimeRequestPostDataWorkflow>((e) => OvertimeRequestPostDataWorkflow().fromJson(e)).toList() as M;
		}	else if(List<OvertimeRequestPostDataWorkflowData>() is M){
			return data.map<OvertimeRequestPostDataWorkflowData>((e) => OvertimeRequestPostDataWorkflowData().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}